package main

import (
    "net/http"

    "github.com/MohammedMogeab/largo/pkg/config"
    "github.com/MohammedMogeab/largo/pkg/httpx"
    "github.com/MohammedMogeab/largo/pkg/httpx/binding"
    "github.com/MohammedMogeab/largo/pkg/httpx/xerr"
)

func main() {
    // Load configuration from .env/env/defaults
    cfg := config.Load()

    r := httpx.New()
    r.Use(httpx.RequestID(), httpx.Recover(), httpx.Logger())

    // Basic route
    r.GET("/", func(c *httpx.Context) {
        c.JSON(http.StatusOK, map[string]string{"message": "Welcome to LarGo!"})
    })

    // Example param route: GET /hello/{name}
    r.GET("/hello/{name}", func(c *httpx.Context) {
        c.JSON(http.StatusOK, map[string]string{"hello": c.Param("name")})
    })

    // Example POST with binding & validation
    type Signup struct {
        Email string `json:"email" validate:"required,email"`
        Name  string `json:"name" validate:"required,min=2"`
    }
    r.Handle(http.MethodPost, "/signup", func(c *httpx.Context) {
        var in Signup
        if err := binding.BindJSON(c.R, &in); err != nil {
            xerr.BadRequest(c.W, c.RequestID, "invalid JSON", nil)
            return
        }
        if fields, _ := binding.Validate(in); len(fields) > 0 {
            xerr.ValidationFailed(c.W, c.RequestID, fields)
            return
        }
        c.JSON(http.StatusCreated, map[string]any{"ok": true})
    })

    if err := httpx.ServeConfig(cfg, r); err != nil {
        panic(err)
    }
}
